@page "/statistics"
@using ThomasCalendar.Business
@using ThomasCalendar.Models
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject DateState DateState
@inject IJSRuntime JSRuntime;

<style>
    body {
        background: #001823;
        height: 100%;
        font-family: Helvetica, Arial, serif;
    }
</style>

<h1 style="color: white">Statistics</h1>



<div class="form-group">

    <table class="table table-dark" style="width:100%;">


        @if (DateState?.Container?.Settings != null)
        {
            <thead>
                <tr>
                    <th>Event</th>
                    <th>All Time</th>
                    <th>Last 7 days</th>
                    <th>Last 30 days</th>
                    <th>Last 90 days</th>
                    <th>This Month</th>
                    <th>Last Month</th>
                </tr>
            </thead>
            @foreach (var eventName in DateState.Container.Settings.Event)
            {
                string name = eventName.Name;


                var helperFunctions = new HelperFunctions();
                helperFunctions.GetDaysWithEventByName(Days, DateState.Container, name);

                var allTime = Days.Count();

                var thisMonth = Days.Count(x => x.Date.Month == todaysDate.Month && x.Date.Year == todaysDate.Year);
                var last7Days = Days.Count(x => x.Date > todaysDate.AddDays(-7));
                var last30Days = Days.Count(x => x.Date > todaysDate.AddDays(-30));
                var last90Days = Days.Count(x => x.Date > todaysDate.AddDays(-90));
                var lastMonth = Days.Count(x => x.Date.Month == todaysDate.AddMonths(-1).Month && x.Date.Year == todaysDate.AddMonths(-1).Year);

                <tr>
                    <td>@name</td>
                    <td>@allTime</td>
                    <td>@last7Days</td>
                    <td>@last30Days</td>
                    <td>@last90Days</td>
                    <td>@thisMonth</td>
                    <td>@lastMonth</td>
                </tr>

            }
        }
    </table>

    <table class="table table-dark" style="width:100%;">


        @if (DateState?.Container?.Settings != null)
        {
            <thead>
                <tr>
                    <th>Event</th>
                    <th>Last Occurrence</th>

                </tr>
            </thead>
            @foreach (var eventName in DateState.Container.Settings.Event)
            {
                string name = eventName.Name;


                var helperFunctions = new HelperFunctions();
                helperFunctions.GetDaysWithEventByName(Days, DateState.Container, name);

                var allTime = Days.OrderByDescending(x => x.Date).FirstOrDefault()?.Date;
                double? daysSinceLastEvent = allTime != null ? ((todaysDate.Date - allTime?.Date)?.TotalDays - 1) : 0;

                <tr>
                    <td>@name</td>
                    <td>@daysSinceLastEvent days since last occurence</td>
                </tr>

            }
        }
    </table>

</div>


@code {

    private CalendarContainer Container = new CalendarContainer();
    public DateTime todaysDate = DateTime.Now;
    private List<Day> Days = new List<Day>();

    protected override async Task OnInitializedAsync()
    {
        Container = await localStore.GetItemAsync<CalendarContainer>("Calendar");

        DateState.UpdateCalendar(Container);
        string localDate = await JSRuntime.InvokeAsync<string>("GetLocalDate");
        todaysDate = DateTime.Parse(localDate);

        if (DateState.Container == null)
        {
            DateState.UpdateCalendar(new CalendarContainer());

            var helperFunctions = new HelperFunctions();
            helperFunctions.CalculateBadDays(Days, DateState.Container);
        }
    }



    protected override void OnInitialized()
    {
        DateState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        DateState.OnChange -= StateHasChanged;
    }

}
