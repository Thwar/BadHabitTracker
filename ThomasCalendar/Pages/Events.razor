@page "/events"
@using ThomasCalendar.Business
@using ThomasCalendar.Models
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject DateState DateState
@*<h1>Todo (@todos.Count(todo => !todo.IsDone))</h1>*@


<h1>Events</h1>

<div class="form-group">
    <h3>List of Events</h3>
    <ul class="list-group eventList">
        @if (DateState?.Container?.Settings != null)
        {
            @foreach (var eventName in DateState.Container.Settings.Event)
            {
                string name = eventName.Name;

                <li class="list-group-item">

                    <div class="input-group col-sm-6 eventItem">
                        <div class="input-group-append">
                            <span style=@(eventName.Color != null ? "background-color:" + eventName.Color : "") class="input-group-text">&nbsp;&nbsp;</span>
                        </div>
                        <input disabled="disabled" class="form-control" @bind="name" />
                        <div class="input-group-append">
                            <button class="btn btn-danger" @onclick="(()=>RemoveEvent(name))"><span class="oi oi-x"></span></button>
                        </div>
                    </div>

                    <div class="col-sm-6">
                    </div>

                </li>
            }
        }

    </ul>
</div>

<br />

<h3>Add new Event</h3>
<div class="input-group row form-group col-sm-6">
    <input placeholder="Event/Activity Name" class="form-control" @bind="newEvent" />
    <div class="input-group-append">
        <button class="btn btn-primary" @onclick="AddEvent">Add</button>
    </div>
</div>



@code {

    private CalendarContainer Container = new CalendarContainer();
    private string newEvent;


    private async Task AddEvent()
    {
        if (!string.IsNullOrWhiteSpace(newEvent))
        {
            // get random hex color
            var random = new Random();
            var color = $"#{random.Next(0x1000000):X6}";

            DateState.Container.Settings.Event.Add(new Event() { Name = newEvent, Color = color });
            newEvent = string.Empty;
            await localStore.SetItemAsync("Calendar", Container);
        }
    }

    private async Task RemoveEvent(string eventName)
    {
        DateState.Container.Settings.Event.Remove(DateState.Container.Settings.Event.First(x => x.Name == eventName));
        await localStore.SetItemAsync("Calendar", Container);
    }

    protected override async Task OnInitializedAsync()
    {
        Container = await localStore.GetItemAsync<CalendarContainer>("Calendar");
        DateState.UpdateCalendar(Container);

        if (DateState.Container == null)
        {
            DateState.UpdateCalendar(new CalendarContainer());
        }
    }


    protected override void OnInitialized()
    {
        DateState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        DateState.OnChange -= StateHasChanged;
    }

}
