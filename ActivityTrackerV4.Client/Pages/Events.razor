@page "/events"
@using ActivityTrackerV4.Business
@using ActivityTrackerV4.Models
@using System.Text.Json
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject DateState DateState
@inject IJSRuntime JSRuntime;
@inject HttpClient _httpClient

<style>
    .eventEdit:hover {
        cursor: pointer;
    }
</style>

<h1>Events</h1>

<div class="form-group">
    <h3>List of Events</h3>
    <ul class="list-group eventList">
        @if (DateState?.Container?.Settings != null)
        {
            @foreach (var eventName in DateState.Container.Settings.Event)
            {
                string name = eventName.Name;
                string color = eventName.Color;

                <li class="list-group-item">

                    <div class="input-group col-sm-6 eventItem">
                        <div class="input-group-append">
                            <span style=@(color != null ? "background-color:" + color : "") class="input-group-text">&nbsp;&nbsp;</span>
                        </div>
                        <input @onclick="@(() => EditEvent(name, color))" class="form-control eventEdit" @bind="name" />
                        <div class="input-group-append">
                            <button class="btn btn-danger" @onclick="(()=>RemoveEvent(name))"><span class="oi oi-x"></span></button>
                        </div>
                    </div>
                    <div class="col-sm-6">  </div>
                </li>
            }
        }

    </ul>
</div>

<br />

<h3>Add new Event</h3>
<div class="input-group row form-group col-sm-6">
    <input placeholder="Event/Activity Name" class="form-control" @bind="newEvent" />
    <div class="input-group-append">
        <button class="btn btn-primary" @onclick="AddEvent">Add</button>
    </div>
</div>


<!-- Edit Event Modal -->
<div class="modal fade" id="addNoteModal" tabindex="-1" role="dialog" aria-labelledby="addNoteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addNoteModalLabel">Edit Event</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <div class="form-row form-group">
                    <div class="col">
                        <label><strong>Event Name</strong></label>
                        <input class="form-control" @bind="newEventName" />
                        <input id="selectedColor" type="hidden" />
                    </div>

                </div>

                <div class="form-row form-group">
                    <label class="col-sm-12"><strong>Event Color Code</strong></label>
                    <br />
                    <div class="col-sm-12" id="picker"></div>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" @onclick="SaveEventData" class="btn btn-primary">Save</button>
            </div>
        </div>
    </div>
</div>


@code {

    private CalendarContainer Container = new();
    private string newEvent;


    private async Task AddEvent()
    {
        if (!string.IsNullOrWhiteSpace(newEvent))
        {
            // get random hex color
            var random = new Random();
            var color = $"#{random.Next(0x1000000):X6}";

            DateState.Container.Settings.Event.Add(new Event() { Name = newEvent, Color = color });
            newEvent = string.Empty;
            await SaveData();
        }
    }

    private async Task RemoveEvent(string eventName)
    {
        DateState.Container.Settings.Event.Remove(DateState.Container.Settings.Event.First(x => x.Name == eventName));
        await SaveData();
    }

    protected override async Task OnInitializedAsync()
    {
        Container = await localStore.GetItemAsync<CalendarContainer>("Calendar");
       // DateState.UpdateCalendar(Container);

        if (DateState.Container == null)
        {
            DateState.UpdateCalendar(new CalendarContainer());
        }
    }

    string newEventName;
    string oldEventName;
    private void EditEvent(string name, string color)
    {
        newEventName = name;
        oldEventName = name;
        JSRuntime.InvokeAsync<bool>("OpenEditEventModal", color);
    }

    private async void SaveEventData()
    {
        // Update Color
        var newColor = await JSRuntime.InvokeAsync<string>("GetColorPickerValue");
        DateState.Container.Settings.Event.Single(x => x.Name == oldEventName).Color = newColor;

        // Update Event Name
        if (newEventName != oldEventName)
        {
            // Update Event Name for existing days
            var helper = new HelperFunctions();
            helper.UpdateEventName(DateState.Container, oldEventName, newEventName);

            // Update Event Name in Settings
            DateState.Container.Settings.Event.Single(x => x.Name == oldEventName).Name = newEventName;

        }

        // Save Calendar
        await SaveData();

        // Refresh nav data?
        DateState.UpdateCalendar(DateState.Container);

        // Close Modal
        await JSRuntime.InvokeAsync<bool>("CloseModal");
    }

    private async Task SaveData()
    {
        await localStore.SetItemAsync("Calendar", DateState.Container);
        await _httpClient.PostAsJsonAsync("api/userdata", JsonSerializer.Serialize(DateState.Container));
    }

    protected override void OnInitialized()
    {
        DateState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        DateState.OnChange -= StateHasChanged;
    }

}
