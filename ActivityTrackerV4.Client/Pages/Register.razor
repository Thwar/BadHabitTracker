@page "/register"
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@inject HttpClient _httpClient
@inject NavigationManager NavigationManager

<h3>Register</h3>

<div>
    <EditForm Model="registerModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />
        
        <div class="mb-3">
            <label for="FirstName">First Name</label>
            <InputText id="FirstName" @bind-Value="registerModel.FirstName" class="form-control" />
            <ValidationMessage For="@(() => registerModel.FirstName)" />
        </div>
        
        <div class="mb-3">
            <label for="LastName">Last Name</label>
            <InputText id="LastName" @bind-Value="registerModel.LastName" class="form-control" />
            <ValidationMessage For="@(() => registerModel.LastName)" />
        </div>

        <div class="mb-3">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="registerModel.Email" class="form-control" />
            <ValidationMessage For="@(() => registerModel.Email)" />
        </div>

        <div class="mb-3">
            <label for="password">Password</label>
            <InputText id="password" @bind-Value="registerModel.Password" type="password" class="form-control" />
            <ValidationMessage For="@(() => registerModel.Password)" />
        </div>

        <button type="submit" class="btn btn-primary">Register</button>
    </EditForm>
    <br/>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@((MarkupString)errorMessage)</div>
    }


</div>

@code {
    private RegisterModel registerModel = new();
    private string errorMessage = string.Empty;

    private async Task HandleRegistration()
    {
        var response = await _httpClient.PostAsJsonAsync("api/accounts/register", registerModel);
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            // Handle error response
            // Extract the error messages from the response
            var errors = await response.Content.ReadFromJsonAsync<IdentityError[]>();
            errorMessage = string.Join("<br/> ", errors.Select(e => e.Description));
            Console.WriteLine("Registration failed");
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "First Name is required.")]
        [MinLength(3, ErrorMessage = "First Name must be at least 3 characters long.")]
        [MaxLength(100)]
        public string FirstName { get; set; }

        [MaxLength(100)]
        public string LastName { get; set; }

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long.")]
        public string Password { get; set; }
    }
}