@inject Blazored.LocalStorage.ILocalStorageService localStore
@using ActivityTrackerV4.Business
@using ActivityTrackerV4.Models
@using Microsoft.AspNetCore.Components.Authorization
@using ActivityTrackerV4.Pages.Components;
@inject IJSRuntime JSRuntime;
@inject DateState DateState
@inject HttpClient _httpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@page "/"

<link href="/css/calendar.css" rel="stylesheet" />

<div class="row">
    <div class="col-sm-9">
        <h1 style="color:white">@CurrentDate.ToString("MMMM") @CurrentDate.Year</h1>
        <span @onclick="PrevMonth" class="oi oi-arrow-circle-left arrow"></span>
        <span @onclick="NextMonth" class="oi oi-arrow-circle-right arrow"></span>

        <ol class="calendar">

            @foreach ((DateTime date, Int32 index) in HelperFunctions.GetAllDatesInMonth(CurrentDate.Year, CurrentDate.Month)
            .Select((value, i) => (value, i)))
            {
                // Is current day?
                bool isCurrentDay = date.Date == TodaysDate.Date;

                // Get previous month days
                @if (index == 0 && date.DayOfWeek != DayOfWeek.Sunday)
                {
                    for (int i = 0; i < (int)date.DayOfWeek; i++)
                    {
                        DateTime pastDay = date.AddDays(-(int)date.DayOfWeek + i);

                        <li class="calendar-day calendar-day--past calendar-day--not-month"
                            style="@(pastDay.Date == TodaysDate.Date ? " border: yellow 3px solid;" : "" )"
                            data-weekday="@date.AddDays(-(int)date.DayOfWeek + i).ToString("ddd").Substring(0, 3)" data-week="">
                            <span class="calendar-day__number">@pastDay.Day</span>
                            <div class="calendar-day__content"></div>
                        </li>
                    }
                }

                // Get Saved dates
                Year savedYear = _container.Year.SingleOrDefault(x => x.Name == date.Year.ToString());
                Month savedMonth = null;
                if (savedYear != null)
                {
                    savedMonth = savedYear.Month.SingleOrDefault(x => x.Name == date.ToString("MMMM"));
                }

                // Get bad habit from Month
                Day dayActivity = null;
                if (savedMonth != null)
                {
                    dayActivity = savedMonth.Day.SingleOrDefault(x => x.Date == date);
                }

                // Calendar Day Block
                <li class="calendar-day @(TodaysDate.Date > date.Date ? "calendar-day--good-past" : ""  )"
                    data-weekday="@date.ToString("ddd").Substring(0, 3)" data-week=""
                    @onclick="@(() => OpenDayJournal(date, dayActivity))"
                    style="@(isCurrentDay ? " border: yellow 3px solid;" : "" )">
                    <span class="calendar-day__number">@date.Day</span>
                    <div class="calendar-day__content">

                        <div class="note">

                            @if (dayActivity?.Event != null)
                            {
                                @foreach (var eventName in dayActivity?.Event.Where(x => !string.IsNullOrWhiteSpace(x)))
                                {
                                    var color = DateState.Container.Settings.Event.FirstOrDefault(x => x.Name == eventName);

                                    <div style=@(color != null ? "background-color:" + color.Color : "") class="badge badge-primary event">@eventName</div>
                                }
                            }
                        </div>

                        @*<div class="note">@(dayActivity.Note.Length > 150 ? dayActivity.Note.Substring(0, 150) + "..." : dayActivity.Note)</div>*@

                        <div class="addNote">
                            <button @onclick="@(() => OpenDayJournal(date, dayActivity))" @onclick:stopPropagation="true" class="btn btn-primary">
                                <span class="oi oi-plus"></span>
                            </button>

                        </div>

                        @if (!string.IsNullOrWhiteSpace(dayActivity?.Note))
                        {
                            <div class="noteBox badge badge-info">
                                Note
                            </div>
                        }
                        @if (dayActivity?.DayRating != null)
                        {
                            <div class="totalBox badge badge-dark" style="background-color:@HelperFunctions.GetRatingColor(dayActivity.DayRating.Value);">
                                @(dayActivity.DayRating)
                            </div>
                        }

                    </div>
                </li>
            }
        </ol>
    </div>


    <div class="col-sm-3" style="color: white; border-left: 1px white dashed;">
        Total spent this month:  @HelperFunctions.GetTotalMonthSpending(_container, CurrentDate)
        <br/><br/>
        <table class="table" style="color:white">
            @if (DateState?.Container?.Settings != null)
            {
                <thead>
                    <tr>
                        <th>Event</th>
                        <th>This Month</th>
                    </tr>
                </thead>
                @foreach (var eventName in DateState.Container.Settings.Event)
                {
                    string name = eventName.Name;

                    // Get the total occurrences of this event in the current month
                    int thisMonthTotal = DateState?.Container.Year
                        .SelectMany(y => y.Month)
                    .Where(m => m.Name == CurrentDate.ToString("MMMM")) // Match the current month
                        .SelectMany(m => m.Day)
                        .SelectMany(d => d.Event)
                        .Count(e => e == name) ?? 0;

                    <tr>
                        <td>@name</td>
                        <td>@thisMonthTotal</td>
                    </tr>
                }
            }
        </table>
    </div>
</div>


<div class="row" style=" color: white; margin-bottom: 2em">
    <div class="col-sm-6">
        Today's date and time: @TodaysDate
    </div>
    <div class="col-sm-6">

        @if (DayEvents.Count != 0)
        {
            var totalMonthRelapses = Days.Count(x => x.Date.Month == CurrentDate.Month && x.Date.Year == CurrentDate.Year);

            <div>Total Relapses this month: @totalMonthRelapses</div>
        }

    </div>
</div>


<JournalModal Model="ModalModel" Container="_container" JournalDate="JournalDate" Note="@Note" DayEvents="DayEvents" DayLedger="DayLedger" DayRating="DayRating" SelectedEvent="default" />
