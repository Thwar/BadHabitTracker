@inject Blazored.LocalStorage.ILocalStorageService localStore
@using ActivityTrackerV4.Business
@using ActivityTrackerV4.Models
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime JSRuntime;
@implements IDisposable
@inject DateState DateState
@inject HttpClient _httpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@page "/"

<link href="/css/calendar.css" rel="stylesheet" />

<style>
    .arrow {
        color: white;
        font-size: 150%;
        padding: 10px;
        cursor: pointer;
    }

    .calendar-day__content .note {
        position: absolute;
        margin: 40px 10px 10px 15px;
        cursor: pointer;
        transition: all 0.5s ease;
        font-size: 55%;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: normal;
    }

    .calendar-day__content .addNote {
        position: absolute;
        cursor: pointer;
        right: 2px;
        bottom: 2px;
        opacity: 0;
        transition: all 0.3s ease;
        z-index: 50;
    }

    .calendar-day__content .noteBox {
        position: absolute;
        cursor: pointer;
        left: 2px;
        bottom: 2px;
        font-size: 50%;
    }

    .calendar-day__content .totalBox {
        position: absolute;
        cursor: pointer;
        right: 6px;
        top: 6px;
        font-size: 50%;
        border-radius: 20px;
    }

    .calendar-day__content:hover > .addNote {
        opacity: 1;
    }

    /* experimental */
    .calendar-day:hover {
        cursor: pointer;
        background-color: rgba(78, 135, 146, 0.8);
        background-color: #f1f1f1;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .calendar-day--past:hover {
        background-color: inherit !important;
    }

    .calendar-day-bad .calendar-day__content {
        background-color: rgba(170, 57, 57, 1);
    }

        .calendar-day-bad .calendar-day__content:hover {
            background-color: rgba(170, 57, 57, 0.8);
        }

    .removeEvent {
        font-size: 75%;
        color: #AA3939;
        position: relative;
        top: 0px;
        cursor: pointer;
    }

        .removeEvent:hover {
            font-size: 80%;
        }

    .modal-header .close {
        margin: -1rem -1rem -1rem 0;
    }

    .modal-container {
        background-color: #fff;
        border-radius: 10px;
        padding: 20px;
        min-height: 750px;
    }

    .modal-dialog {
        display: flex;
        align-items: center;
        min-height: 80vh; /* Minimum height of 80% of the viewport */
    }

    .modal-content {
        min-height: 80vh; /* Minimum height of 80% of the viewport */
        border-radius: 10px; /* Optional: Adds rounded corners for a modern look */
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); /* Optional: Adds a shadow for elevation */
    }

    .badge {
        border-radius: 10px;
        padding: 4px;
    }
</style>


<div class="row">
    <div class="col-sm-10">
        <h1 style="color:white">@CurrentDate.ToString("MMMM") @CurrentDate.Year</h1>
        <span @onclick="PrevMonth" class="oi oi-arrow-circle-left arrow"></span>
        <span @onclick="NextMonth" class="oi oi-arrow-circle-right arrow"></span>

        <ol class="calendar">

            @foreach ((DateTime date, Int32 index) in HelperFunctions.GetAllDatesInMonth(CurrentDate.Year, CurrentDate.Month)
            .Select((value, i) => (value, i)))
            {
                // Is current day?
                bool isCurrentDay = date.Date == TodaysDate.Date;

                // Get previous month days
                @if (index == 0 && date.DayOfWeek != DayOfWeek.Sunday)
                {
                    for (int i = 0; i < (int)date.DayOfWeek; i++)
                    {
                        DateTime pastDay = date.AddDays(-(int)date.DayOfWeek + i);

                        <li class="calendar-day calendar-day--past calendar-day--not-month"
                            style="@(pastDay.Date == TodaysDate.Date ? " border: yellow 3px solid;" : "" )"
                            data-weekday="@date.AddDays(-(int)date.DayOfWeek + i).ToString("ddd").Substring(0, 3)" data-week="">
                            <span class="calendar-day__number">@pastDay.Day</span>
                            <div class="calendar-day__content"></div>
                        </li>
                    }
                }

                // Get Saved dates
                Year savedYear = _container.Year.SingleOrDefault(x => x.Name == date.Year.ToString());
                Month savedMonth = null;
                if (savedYear != null)
                {
                    savedMonth = savedYear.Month.SingleOrDefault(x => x.Name == date.ToString("MMMM"));
                }

                // Get bad habit from Month
                Day dayActivity = null;
                if (savedMonth != null)
                {
                    dayActivity = savedMonth.Day.SingleOrDefault(x => x.Date == date);
                }



                // Calendar Day Block
                <li class="calendar-day @(TodaysDate.Date > date.Date ? "calendar-day--good-past" : ""  )"
                    data-weekday="@date.ToString("ddd").Substring(0, 3)" data-week=""
                    @onclick="@(() => OpenDayJournal(date, dayActivity))"
                    style="@(isCurrentDay ? " border: yellow 3px solid;" : "" )">
                    <span class="calendar-day__number">@date.Day</span>
                    <div class="calendar-day__content">

                        <div class="note">

                            @if (dayActivity?.Event != null)
                            {
                                @foreach (var eventName in dayActivity?.Event.Where(x => !string.IsNullOrWhiteSpace(x)))
                                {
                                    var color = DateState.Container.Settings.Event.FirstOrDefault(x => x.Name == eventName);

                                    <div style=@(color != null ? "background-color:" + color.Color : "") class="badge badge-primary event">@eventName</div>
                                }
                            }
                        </div>

                        @*<div class="note">@(dayActivity.Note.Length > 150 ? dayActivity.Note.Substring(0, 150) + "..." : dayActivity.Note)</div>*@

                        <div class="addNote">
                            <button @onclick="@(() => OpenDayJournal(date, dayActivity))" @onclick:stopPropagation="true" class="btn btn-primary">
                                <span class="oi oi-plus"></span>
                            </button>

                        </div>

                        @if (!string.IsNullOrWhiteSpace(dayActivity?.Note))
                        {
                            <div class="noteBox badge badge-info">
                                Note
                            </div>
                        }
                        @if (dayActivity?.DayRating != null)
                        {
                            <div class="totalBox badge badge-dark" style="background-color:@HelperFunctions.GetRatingColor(dayActivity.DayRating.Value);">
                                @(dayActivity.DayRating)
                            </div>
                        }
                        @*                 @if (dayActivity?.Ledger is { Count: > 0 })
                {
                    <div class="totalBox badge badge-dark">
                        @(dayActivity.Ledger?.Sum(x => x.Amount) ?? 0)
                    </div>
                } *@
                    </div>
                </li>
            }
        </ol>
    </div>


    <div class="col-sm-2" style="color: white">
        Total spent this month:  @HelperFunctions.GetTotalMonthSpending(_container, CurrentDate)
    </div>
</div>




<div class="row" style=" color: white; margin-bottom: 2em">
    <div class="col-sm-6">
        @*Today's date and time: @TodaysDate*@
    </div>
    <div class="col-sm-6">

        @if (DayEvents.Count != 0)
        {
            var totalMonthRelapses = Days.Count(x => x.Date.Month == CurrentDate.Month && x.Date.Year == CurrentDate.Year);

            <div>Total Relapses this month: @totalMonthRelapses</div>
        }

    </div>
</div>

<!-- Day Journal Modal Entry -->
<div class="modal fade" id="addNoteModal" tabindex="-1" role="dialog" aria-labelledby="addNoteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addNoteModalLabel" style="margin: 0 auto; font-weight:bold">Journal Entry @JournalDate.ToShortDateString()</h5>
                <div type="button" data-dismiss="modal" aria-label="Close" style="cursor: pointer">
                    <span aria-hidden="true">&times;</span>
                </div>
            </div>
            <div class="modal-body">

                <div class="form-row form-group col-sm-12">
                    <div class="col">
                        <textarea id="noteText" class="form-control" @bind="Note" rows="5"></textarea>
                    </div>
                </div>


                <div class="form-group col-sm-12">

                    <label class="col-sm-12" style="width:100%; border-bottom: 2px solid grey; font-weight:bold">How was your day? (1 - 10)</label>

                    <div class="mt-2">
                        <!-- Radio buttons for rating from 1 to 10 -->
                        <div class="btn-group btn-group-toggle d-flex w-100">

                            @for (int i = 1; i <= 10; i++)
                            {
                                <label for="dayRating_@i" 
                                       data-rating="@i" 
                                       class="btn btn-outline-primary flex-fill @(DayRating == i ? "active" : "")">
                                    <input type="radio" id="dayRating_@i" name="dayRating" value="@i" @onchange="OnDayRatingChanged" /> @i
                                </label>
                            }

                        </div>

                    </div>
                </div>

                <div class="row col-sm-12">
                    <div class="col-sm-6">
                        <div class="form-row form-group">

                            @* Add Event *@
                            <label class="col-sm-12" style="width:100%; border-bottom: 2px solid grey; font-weight: bold">Activities</label>

                            <div class="input-group col-sm-12 form-group">
                                <input placeholder="Enter an activity you did today" class="form-control" @bind="_newEvent" style="font-size: 12px; height: 30px" />
                                <div class="input-group-append">
                                    <button style="font-size: 12px; height: 30px; width: 60px;" class="btn btn-info" @onclick="AddEvent">Create</button>
                                </div>

                            </div>

                            <div class="input-group col-sm-12">
                                <select id="eventDdl" class="form-control selectpicker" @bind="@SelectedEvent" style="font-size: 12px; height: 30px">
                                    <option value="default">--Select Event--</option>

                                    @if (DateState?.Container?.Settings != null)
                                    {
                                        @foreach (var eventName in DateState.Container.Settings.Event)
                                        {
                                            string name = eventName.Name;

                                            @if (DayEvents != null && DayEvents.Count != 0 && DayEvents.Contains(name))
                                            {

                                            }
                                            else
                                            {
                                                <option value="@name">@name</option>
                                            }
                                        }
                                    }
                                </select>
                                <div class="input-group-append">
                                    <button type="button" @onclick="AddLineEvent" class="btn btn-primary" style="font-size: 12px; height: 30px; width: 60px;">Add</button>
                                </div>
                            </div>
                        </div>

                        <div class="form-row form-group">
                            @* List of Events This Day  *@

                            <ul style="list-style: none; padding-left: 25px;">
                                @if (DayEvents != null && DayEvents.Count != 0)
                                {
                                    @foreach (var eventName in DayEvents.Where(x => !string.IsNullOrWhiteSpace(x)))
                                    {
                                        var color = DateState.Container.Settings.Event.FirstOrDefault(x => x.Name == eventName);

                                        <li style="display: inline-block">
                                            <span style=@(color != null ? "background-color:" + color.Color : "") class="badge badge-primary">
                                                @eventName &nbsp;
                                                <span @onclick="(() => DeleteLineEvent(eventName))" class="oi oi-x removeEvent" aria-hidden="true"></span>
                                            </span>

                                        </li>
                                    }
                                }
                                else
                                {
                                    //nada
                                }

                            </ul>

                        </div>

                    </div>

                    <div class="col-sm-6">
                        @* List of Expenses This Day *@
                        <div class="form-row form-group">

                            <div class="col">
                                <label style="width:100%; border-bottom: 2px solid grey;font-weight: bold">Day Expenses</label>

                                @if (DayLedger != null && DayLedger.Count != 0)
                                {
                                    @foreach (var expenseLine in DayLedger)
                                    {
                                        <div class="input-group" style="padding-bottom: 5px">
                                            <input style="width:60%" value="@expenseLine.Description" class="form-control" placeholder="Description" type="text"
                                                   @onchange="@((ChangeEventArgs __e) => expenseLine.Description =  __e.Value.ToString())" />

                                            <input value="@expenseLine.Amount" class="form-control" placeholder="Amount" type="number"
                                                   @onchange="@((ChangeEventArgs __e) => expenseLine.Amount = decimal.Parse(__e.Value.ToString() == "" ? "0" :__e.Value.ToString() ))" />

                                            <span style="padding:10px" @onclick="(() => DeleteLedgerLine(expenseLine.Id))" class="oi oi-x removeEvent" aria-hidden="true"></span>
                                        </div>
                                    }
                                }

                                <a href="#!" @onclick="AddLedgerLine">Add</a>

                                @* <button type="button" @onclick="AddLedgerLine" class="btn btn-success btn-sm"><span class="oi oi-plus"></span></button> *@

                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <div style="position: absolute; left: 20px; font-size: 150%">
                    Total: @(DayLedger?.Sum(x => x.Amount) ?? 0)
                </div>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" @onclick="SaveJournalEntry" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>


@* @code {
    public DateTime currentDate = DateTime.Now;
    public DateTime TodaysDate = DateTime.Now;
    private CalendarContainer Container = new();
    private List<Day> Habits = new List<Day>();
    private string newEvent;

    DateTime JournalDate;
    protected string Note { get; set; }
    protected int DayRating { get; set; } = 1; // Default value is 1
    protected List<string> DayEvents { get; set; }
    public List<LedgerLine> DayLedger { get; set; }
    protected string SelectedEvent { get; set; }

    private void OnDayRatingChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int rating))
        {
            DayRating = rating;
        }
    }

    private void AddLedgerLine()
    {
        if (DayLedger == null)
        {
            DayLedger = new List<LedgerLine>();
        }

        DayLedger.Add(new LedgerLine { Id = Guid.NewGuid(), Amount = 0, Description = "" });
    }

    private void DeleteLedgerLine(Guid id)
    {
        DayLedger.Remove(DayLedger.First(x => x.Id == id));
    }

    private void DeleteLineEvent(string eventName)
    {
        DayEvents.Remove(eventName);
    }

    private void AddLineEvent()
    {
        if (SelectedEvent != "default")
        {
            if (DayEvents == null)
            {
                DayEvents = new List<string>();
            }

            // ToggleStatus(JournalDate, Note, SelectedEvent);
            DayEvents.Add(SelectedEvent);
            SelectedEvent = "default";
        }
    }

    private async Task AddEvent()
    {
        if (!string.IsNullOrWhiteSpace(newEvent))
        {
            // get random hex color
            var random = new Random();
            var color = $"#{random.Next(0x1000000):X6}";

            DateState.Container.Settings.Event.Add(new Event() { Name = newEvent, Color = color });
            newEvent = string.Empty;

            // Update JSON in DB

            var refreshToken = await localStore.GetItemAsync<string>("refreshToken");
            var refreshResponse = await _httpClient.PostAsJsonAsync("api/accounts/refresh", refreshToken);
            //  var response = await _httpClient.PostAsJsonAsync("api/userdata", JsonSerializer.Serialize(Container));

            await localStore.SetItemAsync("Calendar", Container);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) { }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Check if the user is authenticated
        if (!user.Identity?.IsAuthenticated ?? true)
        {
            // Redirect to the register page if not authenticated
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            string localDate = await JSRuntime.InvokeAsync<string>("GetLocalDate");
            currentDate = DateTime.Parse(localDate);
            TodaysDate = DateTime.Parse(localDate);

            var refreshToken = await localStore.GetItemAsync<string>("refreshToken");
            if (!string.IsNullOrWhiteSpace(refreshToken))
            {
                var refreshResponse = await _httpClient.PostAsJsonAsync("api/accounts/refresh", refreshToken);
            }

            try
            {
                var response = await _httpClient.GetStringAsync("api/userdata");

                if (!string.IsNullOrEmpty(response))
                {
                    Container = JsonSerializer.Deserialize<CalendarContainer>(response) ?? new CalendarContainer();
                }
                else
                {
                    Container = new CalendarContainer();
                }
            }
            catch (HttpRequestException ex)
            {
                Console.WriteLine($"Failed to fetch user data: {ex.Message}");
            }

            var helperFunctions = new HelperFunctions();
            helperFunctions.CalculateBadDays(Habits, Container);
        }
    }


    private void NextMonth()
    {
        currentDate = currentDate.AddMonths(1);
    }

    private void PrevMonth()
    {
        currentDate = currentDate.AddMonths(-1);
    }

    private async void ToggleStatus(DateTime date, string note = null, List<string> events = null, List<LedgerLine> ledger = null, bool markDay = false)
    {
        if (note == null && events == null && date > TodaysDate && ledger == null)
        {
            return;
        }

        // Year exists?
        var year = Container.Year.FirstOrDefault(x => x.Name.Contains(date.Year.ToString()));
        var month = new Month();
        bool addYear = false;
        bool addMonth = false;

        if (year != null)
        {
            // Month exists?
            month = year.Month.FirstOrDefault(x => x.Name.Contains(date.ToString("MMMM")));

            if (month == null)
            {
                month = new Month { Name = date.ToString("MMMM") };
                addMonth = true;
            }
        }
        else
        {
            year = new Year { Name = date.Year.ToString() };
            month.Name = date.ToString("MMMM");
            addYear = true;
            addMonth = true;
        }

        // Day exists?
        var doesDayExist = month.Day.Any(x => x.Date == date.Date);
        if (doesDayExist == false)
        {
            var newBadHabit = new Day
                {
                    Date = date.Date,
                    Note = note ?? "",
                    Event = events,
                    DidSomethingBad = markDay,
                    Ledger = ledger
                };

            // Save new date
            month.Day.Add(newBadHabit);

            // Save new date
            if (addMonth)
            {
                year.Month.Add(month);
            }

            if (addYear)
            {
                Container.Year.Add(year);
            }
        }
        else
        {
            // Day entry exists
            var dayEvent = month.Day.Single(x => x.Date == date.Date).Event;

            // Update Events
            if (events != null)
            {
                month.Day.Single(x => x.Date == date.Date).Event = events;
            }

            // Edit Note
            if (note != null)
            {
                month.Day.Single(x => x.Date == date.Date).Note = note;
            }

            // Edit ledger
            if (ledger != null)
            {
                month.Day.Single(x => x.Date == date.Date).Ledger = ledger;
            }

            // Edit day mark
            if (markDay)
            {
                bool didSomethingBad = month.Day.Single(x => x.Date == date.Date).DidSomethingBad;
                month.Day.Single(x => x.Date == date.Date).DidSomethingBad = !didSomethingBad;

                // Remove day record if no info
                var currentNote = month.Day.Single(x => x.Date == date.Date).Note;
                var currentLedger = month.Day.Single(x => x.Date == date.Date).Ledger;
                if (didSomethingBad && (dayEvent == null || dayEvent.Count == 0) && string.IsNullOrWhiteSpace(currentNote)
                    && (currentLedger == null || currentLedger.Count == 0))
                {
                    month.Day.Remove(month.Day.Single(x => x.Date == date.Date));
                }
            }
        }

        // Update JSON in DB
        var response = await _httpClient.PostAsJsonAsync("api/userdata", JsonSerializer.Serialize(Container));

        // Update JSON in localstorage
        await localStore.SetItemAsync("Calendar", Container);

        // Refresh data
        var helperFunctions = new HelperFunctions();
        helperFunctions.CalculateBadDays(Habits, Container);
        base.StateHasChanged();


        // Refresh nav data?
        DateState.UpdateCalendar(Container);
    }


    private void OpenDayJournal(DateTime date, string note, List<string> events, List<LedgerLine> ledger)
    {
        DayRating = 1;
        JournalDate = date;
        Note = note;
        DayEvents = events;
        DayLedger = ledger;
        SelectedEvent = "default";
        JSRuntime.InvokeAsync<bool>("OpenModal");
        JSRuntime.InvokeVoidAsync("InitHtmlEditor");
    }

    private void SaveJournalEntry()
    {
        ToggleStatus(JournalDate, Note, DayEvents, DayLedger);
        JSRuntime.InvokeAsync<bool>("CloseModal");
    }

    protected override void OnInitialized()
    {
        DateState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        DateState.OnChange -= StateHasChanged;
    }
}
 *@