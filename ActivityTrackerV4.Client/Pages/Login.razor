@page "/login"
@using ActivityTrackerV4.Business
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient _httpClient
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService _localStorageService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject Blazored.LocalStorage.ILocalStorageService localStore

<h3>Login</h3>

<div>
    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Email Field -->
        <div class="mb-3">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
        </div>

        <!-- Password Field -->
        <div class="mb-3">
            <label for="password">Password</label>
            <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control" />
        </div>

        <!-- Error Message -->
        @if (!string.IsNullOrEmpty(errorMessage))
        {
                <div class="alert alert-danger">@errorMessage</div>
        }

        <!-- Loading Indicator -->
        @if (isLoading)
        {
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
        }

        <button type="submit" class="btn btn-primary" disabled="@isLoading">Login</button>
    </EditForm>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        // Clear previous error messages
        errorMessage = string.Empty;

        try
        {
            // Set loading state
            isLoading = true;

            // Call your API to authenticate and get the token
            var response = await _httpClient.PostAsJsonAsync("api/accounts/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResult>();
                await _localStorageService.SetItemAsync("authToken", result.Token);

                // Delete cache so it always pull the fresh copy
                await localStore.RemoveItemAsync("CalendarCache");

                ((CustomAuthenticationStateProvider)_authenticationStateProvider).NotifyUserAuthentication(result.Token);
                NavigationManager.NavigateTo("/", forceLoad:false);
            }
            else
            {
                // Display error message if login fails
                errorMessage = "Invalid email or password. Please try again.";
            }
        }
        catch (Exception ex)
        {
            // Handle unexpected errors
            errorMessage = "An error occurred while logging in. Please try again later.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            // Reset loading state
            isLoading = false;
        }
    }

    public class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    public class LoginResult
    {
        public string Token { get; set; }
        public string RefreshToken { get; set; }
    }
}
