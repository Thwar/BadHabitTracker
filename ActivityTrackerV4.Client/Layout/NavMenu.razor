@using System.ComponentModel
@using System.Text.Json
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject IJSRuntime JSRuntime;
@inject DateState DateState
@using System.Net.Http
@using ActivityTrackerV4.Business
@using ActivityTrackerV4.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http


<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Activity Tracker v4</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        @*<li class="nav-item px-3">
                            <NavLink class="nav-link" href="home" Match="NavLinkMatch.All">
                                <span class="oi oi-home" aria-hidden="true"></span> Home
                            </NavLink>
                        </li>
                        <li class="nav-item px-3">
                            <NavLink class="nav-link" href="counter">
                                <span class="oi oi-plus" aria-hidden="true"></span> Counter
                            </NavLink>
                        </li>
                        <li class="nav-item px-3">
                            <NavLink class="nav-link" href="fetchdata">
                                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
                            </NavLink>
                        </li>
            >*@


        @code {
            [Inject]
            public AuthenticationStateProvider AuthenticationStateProvider { get; set; }

            [Inject]
            public Blazored.LocalStorage.ILocalStorageService LocalStorageService { get; set; }

            [Inject]
            public NavigationManager NavigationManager { get; set; }

            private async Task Logout()
            {
                await LocalStorageService.RemoveItemAsync("authToken");
                ((CustomAuthenticationStateProvider)AuthenticationStateProvider).NotifyUserLogout();
                NavigationManager.NavigateTo("/login");
            }
        }
        
        <AuthorizeView>
            <Authorized>
                <li class="nav-item">
                    <a href="Identity/Account/Manage" class="nav-link">Hello, @context.User.Identity.Name!</a>
                </li>
                <li class="nav-item">
                    <button @onclick="Logout" class="btn btn-link nav-link">Logout</button>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="oi oi-calendar" aria-hidden="true"></span> Calendar
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="events">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Events
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="statistics">
                        <span class="oi oi-graph" aria-hidden="true"></span> Statistics
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="settings">
                        <span class="oi oi-vertical-align-center" aria-hidden="true"></span> Settings
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="about">
                        <span class="oi oi-info" aria-hidden="true"></span> About
                    </NavLink>
                </li>
            </Authorized>
            <NotAuthorized>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="login">Login</NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="register">Register</NavLink>
                </li>
            </NotAuthorized>
        </AuthorizeView>


    </ul>

    @* Nav Bottom Card *@
    <div id="navInfoCard">
        <div class="card" style="position: absolute; bottom: 140px; width: 100%; width: 220px; right: 15px">
            <div class="card-body" style="padding-left: 15px; padding-right: 15px; text-align: center">

                @if (DateState.Container != null)
                {
@*                     <div>@GetRelapseDays() Day streak</div>
                    <div>Last Relapse: @(DateState.GetLastRelapse()?.ToShortDateString() ?? "n/a")</div>
                    <br /> *@
                    <div style="font-size: 90%;   transition: all 0.5s ease; font-style: italic">
                        @if (Quotes != null && Quotes.Count != 0)
                        {
                            if (!gotQuote)
                            {
                                @GetQuote()
                            }
                            else
                            {
                                @quoteDisplay
                            }
                        }
                    </div>
                }
            </div>
        </div>

        <div style="position: absolute; bottom: 30px; width: 100%; color: white; text-align: center; font-size: 90%">
            Activity Tracker v4 2024 <br /> Created by: Thomas Rosales
        </div>

    </div>

</div>


@code {

    private bool collapseNavMenu = true;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }


    private CalendarContainer Container = new CalendarContainer();
    private List<Day> Habits = new List<Day>();
    private List<Quote>? Quotes = new List<Quote>();
    public DateTime todaysDate = DateTime.Now;


    protected override async Task OnInitializedAsync()
    {
        Container = await localStore.GetItemAsync<CalendarContainer>("Calendar");
        DateState.UpdateCalendar(Container);
        string localDate = await JSRuntime.InvokeAsync<string>("GetLocalDate");
        todaysDate = DateTime.Parse(localDate);

        var helperFunctions = new HelperFunctions();

        if (DateState.Container != null)
        {
            helperFunctions.CalculateBadDays(Habits, DateState.Container);
        }
        else
        {
            DateState.UpdateCalendar(new CalendarContainer());
        }


        //  var quotes = await JSRuntime.InvokeAsync<string>("GetQuotes");

        //  Quotes = JsonSerializer.Deserialize<List<Quote>>(quotes, null);

        Quotes = await Http.GetFromJsonAsync<List<Quote>>("https://localhost:7142/sample-data/quotes.json");
    }

    public double GetRelapseDays()
    {
        var days = ((todaysDate.Date - DateState.GetLastRelapse()?.Date)?.TotalDays - 1) ?? 0;

        if (days < 1)
        {
            days = 0;
        }

        return days;
    }


    Random rnd = new Random();
    bool gotQuote = false;
    string quoteDisplay;
    public string GetQuote()
    {
        var quotes = Quotes.OrderBy(x => Guid.NewGuid()).Where(x => x.text.Length < 100).ToList();

        var qu = quotes[rnd.Next(quotes.Count)];

        quoteDisplay = qu?.text + " - " + qu?.author;

        gotQuote = true;

        return quoteDisplay;
    }


    protected override void OnInitialized()
    {
        DateState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        DateState.OnChange -= StateHasChanged;
    }
}
